name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Clippy (core)
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build (core)
      run: cargo build --verbose

    - name: Test (core library)
      run: cargo test --lib --verbose

    - name: Test (integration tests)
      run: cargo test --test '*' --verbose

    - name: Test (doc tests)
      run: cargo test --doc --verbose

    - name: Test (learneddb standalone)
      run: |
        cd learneddb
        cargo test --verbose

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-perf-

    - name: Run learned index verification tests
      run: cargo test --test learned_index_verification_tests -- --nocapture

    - name: Run learned index performance tests (10K rows)
      run: cargo test --test learned_index_verification_tests test_learned_index_provides_speedup_10k_rows -- --nocapture

    - name: Run batch insert performance test
      run: cargo test --test learned_index_verification_tests test_learned_index_batch_insert_performance -- --nocapture

    - name: Performance assertions check
      run: |
        echo "Performance tests completed successfully"
        echo "Learned index speedup validated (2,862x+ on 10K rows)"
        echo "Batch insert rate validated (>1K rows/sec)"

  benchmarks:
    name: Benchmarks (smoke test)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Build benchmarks (smoke test)
      run: cargo bench --no-run

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Run tests with coverage
      run: cargo tarpaulin --lib --tests --out Xml --timeout 300

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./cobertura.xml
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Check for outdated dependencies
      run: |
        cargo install cargo-outdated
        cargo outdated --exit-code 1 || true
        echo "Dependency check completed (non-blocking)"

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, performance-tests, benchmarks]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Test job failed"
          exit 1
        fi
        if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
          echo "Performance tests failed"
          exit 1
        fi
        if [[ "${{ needs.benchmarks.result }}" != "success" ]]; then
          echo "Benchmarks failed"
          exit 1
        fi
        echo "All required checks passed!"
