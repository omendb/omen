# OmenDB Docker Compose Configuration
# For development, testing, and production deployment

version: '3.8'

services:
  # OmenDB Main Database Service
  omendb:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: omendb-main
    restart: unless-stopped
    ports:
      - "3000:3000"   # HTTP API
      - "9090:9090"   # Prometheus metrics
    environment:
      # Database configuration
      RUST_LOG: info
      OMENDB_DATA_DIR: /var/lib/omendb/data
      OMENDB_LOG_DIR: /var/log/omendb
      OMENDB_HTTP_PORT: 3000

      # Security settings
      OMENDB_AUTH_DISABLED: false
      OMENDB_ADMIN_USER: admin
      OMENDB_ADMIN_PASSWORD: ${OMENDB_ADMIN_PASSWORD:-admin123}
      OMENDB_JWT_SECRET: ${OMENDB_JWT_SECRET:-change-in-production}
      OMENDB_SESSION_TIMEOUT: 3600

      # TLS configuration (optional)
      OMENDB_TLS_ENABLED: false
      # OMENDB_TLS_CERT: /etc/omendb/certs/server.crt
      # OMENDB_TLS_KEY: /etc/omendb/certs/server.key

      # Performance tuning
      OMENDB_WORKER_THREADS: 4
      OMENDB_MAX_CONNECTIONS: 100
    volumes:
      - omendb_data:/var/lib/omendb/data
      - omendb_logs:/var/log/omendb
      # - ./certs:/etc/omendb/certs:ro  # Uncomment for TLS
    networks:
      - omendb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.omendb.rule=Host(`omendb.local`)"
      - "traefik.http.services.omendb.loadbalancer.server.port=3000"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: omendb-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - omendb-network
    depends_on:
      - omendb

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: omendb-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - omendb-network
    depends_on:
      - prometheus

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: omendb-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - omendb-network
    profiles:
      - "with-cache"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: omendb-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - omendb-network
    depends_on:
      - omendb
    profiles:
      - "with-proxy"

# Named volumes for persistence
volumes:
  omendb_data:
    driver: local
  omendb_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  omendb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16