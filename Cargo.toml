[package]
name = "omen"
version = "0.0.1"
edition = "2021"
authors = ["OmenDB Inc."]
description = "Embedded PostgreSQL-compatible vector database for AI applications"
repository = "https://github.com/omendb/omen"
license = "Elastic-2.0"
keywords = ["vector-database", "embedded", "ai", "hnsw", "postgresql"]
categories = ["database", "embedded"]

[lib]
name = "omen"
path = "src/lib.rs"

[[bin]]
name = "omen"
path = "src/main.rs"

[[bin]]
name = "bench_arrow"
path = "src/bench_arrow.rs"



[dev-dependencies]
criterion = "0.5"
proptest = "1.4"
quickcheck = "1.0"

# Integration testing
wiremock = "0.6"
assert_cmd = "2.0"
predicates = "3.0"

# HTTP client for testing REST API
reqwest = { version = "0.12", features = ["json"] }

[dependencies]
# PostgreSQL clients for benchmarks and testing
tokio-postgres = "0.7"
postgres = "0.19"
# SQLite for comparison benchmarks
rusqlite = { version = "0.32", features = ["bundled"] }

# Memory optimization
lazy_static = "1.4"

# SQL Engine - Apache DataFusion
datafusion = "50.1"
datafusion-physical-plan = "50.1"

# OLTP Storage - Pure Rust embedded database
redb = "2.1"

# RocksDB - High-performance storage engine (Facebook)
# Used as fast storage layer with ALEX learned indexes
rocksdb = "0.24"

# Arrow for columnar storage (upgraded for DataFusion 50.1 compatibility)
arrow = "56"
parquet = "56"

# SQL parsing (keep for compatibility during migration)
sqlparser = "0.49"

# PostgreSQL Wire Protocol
pgwire = { version = "0.27", features = ["scram"] }

# HTTP REST API
axum = "0.7"
tower = "0.4"
tower-http = { version = "0.5", features = ["compression-full", "cors"] }

# Caching
moka = { version = "0.12", features = ["future"] }

# Configuration Management
figment = { version = "0.10", features = ["toml", "env"] }

# Compression (Parquet + network)
zstd = "0.13"

# Data Export (PostgreSQL COPY)
csv = "1.3"

# Rate Limiting
governor = "0.6"

# Async Utilities
futures = "0.3"

# Better Error Messages
miette = { version = "7.0", features = ["fancy"] }

# Async runtime for storage operations
tokio = { version = "1.40", features = ["full"] }

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"

# WAL support
crc32fast = "1.4"
chrono = { version = "0.4", features = ["serde"] }

# Testing
tempfile = "3.8"

# Monitoring and Logging
prometheus = "0.13"
once_cell = "1.19"
hyper = { version = "0.14", features = ["full"] }
bytes = "1.5"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["json", "env-filter"] }
tracing-appender = "0.2"

# Security
base64 = "0.21"
rustls = "0.23"
tokio-rustls = "0.26"
rustls-pemfile = "2.1"

# Backup and compression
flate2 = "1.0"
sha2 = "0.10"
rand = "0.8"
rand_distr = "0.4"
glob = "0.3"

# TPC-H benchmark data generation
tpchgen = "2.0"
tpchgen-arrow = "2.0"

# async-trait used by other modules
async-trait = "0.1"

# CLI tools
clap = { version = "4.0", features = ["derive"] }
env_logger = "0.10"
lru = "0.16.1"

# Memory-mapped I/O (for custom storage validation)
memmap2 = "0.9"
sys-info = "0.9.1"

# PCA for vector dimensionality reduction (simple custom implementation, no external LAPACK)
ndarray = "0.16"

# HNSW for vector search (Week 2 implementation)
hnsw_rs = "0.3"

# Ordered floats for HNSW (custom implementation)
ordered-float = "4.0"

# System information (CPU count, etc)
num_cpus = "1.16"

[features]
default = []
simd = []  # Enable std::simd (requires nightly Rust)
hnsw-simd = ["hnsw_rs/simdeez_f"]  # Enable SIMD for HNSW (x86_64 only, not compatible with ARM/M3)

[profile.release]
lto = true
codegen-units = 1
opt-level = 3

# Vector-related benchmarks and tests

[[bin]]
name = "benchmark_hnsw"
path = "src/bin/benchmark_hnsw.rs"

[[bin]]
name = "benchmark_pca"
path = "src/bin/benchmark_pca.rs"

[[bin]]
name = "benchmark_pca_alex_vs_hnsw"
path = "src/bin/benchmark_pca_alex_vs_hnsw.rs"

[[bin]]
name = "benchmark_quantization"
path = "src/bin/benchmark_quantization.rs"

[[bin]]
name = "benchmark_bq_hnsw"
path = "src/bin/benchmark_bq_hnsw.rs"

[[bin]]
name = "benchmark_bq_recall"
path = "src/bin/benchmark_bq_recall.rs"

[[bin]]
name = "benchmark_hnsw_persistence"
path = "src/bin/benchmark_hnsw_persistence.rs"

[[bin]]
name = "test_graph_serialization"
path = "src/bin/test_graph_serialization.rs"

[[bin]]
name = "benchmark_graph_serialization_100k"
path = "src/bin/benchmark_graph_serialization_100k.rs"

[[bin]]
name = "benchmark_1m_scale_validation"
path = "src/bin/benchmark_1m_scale_validation.rs"

[[bin]]
name = "test_parallel_building"
path = "src/bin/test_parallel_building.rs"

[[bin]]
name = "benchmark_1m_parallel"
path = "src/bin/benchmark_1m_parallel.rs"

[[bin]]
name = "validate_1m_end_to_end"
path = "src/bin/validate_1m_end_to_end.rs"

[[bin]]
name = "profile_queries"
path = "src/bin/profile_queries.rs"

[[bin]]
name = "benchmark_pgvector_comparison"
path = "src/bin/benchmark_pgvector_comparison.rs"

[[bin]]
name = "benchmark_custom_hnsw"
path = "src/bin/benchmark_custom_hnsw.rs"

