🧪 OmenDB Memory Stability Test Suite
============================================================
🔍 Test 1: Repeated Clear/Insert Cycles
--------------------------------------------------
Cycle 1/10... 🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 BATCH OPTIMIZATION: Large batch detected (1000 vectors), using direct HNSW construction
🚀 PHASE 2: Using true bulk HNSW insertion (5-10x faster than individual)
🎯 MONOLITHIC: Using proven sequential insertion for 1000 vectors
🚀 STATE-OF-THE-ART: High-performance bulk insertion for 1000 nodes

🔍 PROFILING MODE: Node 2 of 3
🔍 HNSW Insertion Profiling Results (Node 1 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0 ms
    Binary Quantization:     0.00100000761449337 ms
    Layer Insertion Total:   0.027999980375170708 ms
      └─ Neighbor Search:    0.027999980375170708 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.028999987989664078 ms
  📈 Bottleneck Analysis:
    Navigation:    0 %
    Neighbor Search: 96 %
    Connection:    0 %
    Pruning:       0 %

🔍 PROFILING MODE: Node 3 of 3
🔍 HNSW Insertion Profiling Results (Node 2 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0009999785106629133 ms
    Binary Quantization:     0.00100000761449337 ms
    Layer Insertion Total:   0.00100000761449337 ms
      └─ Neighbor Search:    0.00100000761449337 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.0029999937396496534 ms
  📈 Bottleneck Analysis:
    Navigation:    33 %
    Neighbor Search: 33 %
    Connection:    0 %
    Pruning:       0 %
  Progress: 1000 / 1000 vectors inserted
✅ BULK INSERT: 1000 vectors processed in bulk
✅ 1000/1000
Cycle 2/10... 🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 BATCH OPTIMIZATION: Large batch detected (1000 vectors), using direct HNSW construction
🚀 PHASE 2: Using true bulk HNSW insertion (5-10x faster than individual)
🎯 MONOLITHIC: Using proven sequential insertion for 1000 vectors
🚀 STATE-OF-THE-ART: High-performance bulk insertion for 1000 nodes

🔍 PROFILING MODE: Node 2 of 3
🔍 HNSW Insertion Profiling Results (Node 1 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.00999998883344233 ms
    Binary Quantization:     0.0 ms
    Layer Insertion Total:   0.00100000761449337 ms
      └─ Neighbor Search:    0.00100000761449337 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.0109999964479357 ms
  📈 Bottleneck Analysis:
    Navigation:    90 %
    Neighbor Search: 9 %
    Connection:    0 %
    Pruning:       0 %

🔍 PROFILING MODE: Node 3 of 3
🔍 HNSW Insertion Profiling Results (Node 2 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0 ms
    Binary Quantization:     0.0009999785106629133 ms
    Layer Insertion Total:   0.00300002284348011 ms
      └─ Neighbor Search:    0.00200001522898674 ms
      └─ Connection Mgmt:    0.00100000761449337 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.0040000013541430235 ms
  📈 Bottleneck Analysis:
    Navigation:    0 %
    Neighbor Search: 50 %
    Connection:    25 %
    Pruning:       0 %
  Progress: 1000 / 1000 vectors inserted
✅ BULK INSERT: 1000 vectors processed in bulk
✅ 1000/1000
Cycle 3/10... 🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 BATCH OPTIMIZATION: Large batch detected (1000 vectors), using direct HNSW construction
🚀 PHASE 2: Using true bulk HNSW insertion (5-10x faster than individual)
🎯 MONOLITHIC: Using proven sequential insertion for 1000 vectors
🚀 STATE-OF-THE-ART: High-performance bulk insertion for 1000 nodes

🔍 PROFILING MODE: Node 2 of 3
🔍 HNSW Insertion Profiling Results (Node 1 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0 ms
    Binary Quantization:     0.00100000761449337 ms
    Layer Insertion Total:   0.0040000013541430235 ms
      └─ Neighbor Search:    0.0040000013541430235 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.0050000089686363935 ms
  📈 Bottleneck Analysis:
    Navigation:    0 %
    Neighbor Search: 79 %
    Connection:    0 %
    Pruning:       0 %

🔍 PROFILING MODE: Node 3 of 3
🔍 HNSW Insertion Profiling Results (Node 2 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0019999861251562834 ms
    Binary Quantization:     0.0 ms
    Layer Insertion Total:   0.00100000761449337 ms
      └─ Neighbor Search:    0.00100000761449337 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.0029999937396496534 ms
  📈 Bottleneck Analysis:
    Navigation:    66 %
    Neighbor Search: 33 %
    Connection:    0 %
    Pruning:       0 %
  Progress: 1000 / 1000 vectors inserted
✅ BULK INSERT: 1000 vectors processed in bulk
✅ 1000/1000
Cycle 4/10... 🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 TRUE PARALLEL HNSW: Initialized with 8 parallel segments
🚀 BATCH OPTIMIZATION: Large batch detected (1000 vectors), using direct HNSW construction
🚀 PHASE 2: Using true bulk HNSW insertion (5-10x faster than individual)
🎯 MONOLITHIC: Using proven sequential insertion for 1000 vectors
🚀 STATE-OF-THE-ART: High-performance bulk insertion for 1000 nodes

🔍 PROFILING MODE: Node 2 of 3
🔍 HNSW Insertion Profiling Results (Node 1 ):
  📊 Component Breakdown:
    Visited Management:      0.0 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0 ms
    Binary Quantization:     0.00100000761449337 ms
    Layer Insertion Total:   0.00200001522898674 ms
      └─ Neighbor Search:    0.00200001522898674 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.00300002284348011 ms
  📈 Bottleneck Analysis:
    Navigation:    0 %
    Neighbor Search: 66 %
    Connection:    0 %
    Pruning:       0 %

🔍 PROFILING MODE: Node 3 of 3
🔍 HNSW Insertion Profiling Results (Node 2 ):
  📊 Component Breakdown:
    Visited Management:      0.0009999785106629133 ms
    Entry Setup:             0.0 ms
    Hierarchical Navigation: 0.0 ms
    Binary Quantization:     0.0 ms
    Layer Insertion Total:   0.00100000761449337 ms
      └─ Neighbor Search:    0.00100000761449337 ms
      └─ Connection Mgmt:    0.0 ms
      └─ Pruning:            0.0 ms
  ⏱️  Total Insertion Time:    0.0019999861251562834 ms
  📈 Bottleneck Analysis:
    Navigation:    0 %
    Neighbor Search: 50 %
    Connection:    0 %
    Pruning:       0 %
Fatal Python error: Segmentation fault

Current thread 0x00000001f3036140 (most recent call first):
  File "/Users/nick/github/omendb/core/omendb/engine/../../test_memory_stability.py", line 41 in test_repeated_clear_and_insert
  File "/Users/nick/github/omendb/core/omendb/engine/../../test_memory_stability.py", line 186 in main
  File "/Users/nick/github/omendb/core/omendb/engine/../../test_memory_stability.py", line 223 in <module>

Extension modules: numpy.core._multiarray_umath, numpy.core._multiarray_tests, numpy.linalg._umath_linalg, numpy.fft._pocketfft_internal, numpy.random._common, numpy.random.bit_generator, numpy.random._bounded_integers, numpy.random._mt19937, numpy.random.mtrand, numpy.random._philox, numpy.random._pcg64, numpy.random._sfc64, numpy.random._generator (total: 13)
